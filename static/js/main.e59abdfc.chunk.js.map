{"version":3,"sources":["helpers.js","store/selectors.js","components/Navbar.js","components/Spinner.js","components/OrderBook.js","store/interactions.js","store/actions.js","components/Trades.js","components/MyTransactions.js","components/PriceChart.config.js","components/PriceChart.js","components/Balance.js","components/NewOrder.js","components/Content.js","components/App.js","store/reducers.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["ETHER_ADDRESS","GREEN","RED","ether","wei","tokens","formatBalance","balance","Math","round","account","state","get","accountSelector","createSelector","a","web3Selector","w","tokenLoaded","tokenSelector","tl","t","exchangeLoaded","exchangeSelector","el","e","contractsLoadedSelector","cancelledOrdersLoaded","cancelledOrders","loaded","filledOrdersLoaded","o","filledOrdersLoadedSelector","filledOrders","filledOrdersSelector","orders","sort","b","timestamp","decorateFilledOrders","previousOrder","map","order","decorateOrder","decorateFilledOrder","etherAmount","tokenAmount","tokenGive","amountGive","amountGet","precision","tokenPrice","formattedTimestamp","moment","unix","format","tokenPriceClass","id","orderId","openOrders","all","allOrders","filled","cancelled","reject","orderFilled","some","orderCancelled","orderBookLoaded","allOrdersLoaded","orderBookLoadedSelector","orderBookSelector","decorateOrderBookOrders","groupBy","buyOrders","sellOrders","decorateOrderBookOrder","orderType","orderTypeClass","orderFillAction","myFilledOrdersLoadedSelector","myFilledOrdersSelector","filter","user","userFill","decorateMyFilledOrders","decorateMyFilledOrder","orderSign","myOpenOrdersLoadedSelector","myOpenOrdersSelector","decorateMyOpenOrders","decorateMyOpenOrder","priceChartLoadedSelector","priceChartSelector","secondLastOrder","lastOrder","slice","length","lastPrice","lastPriceChange","series","data","buildGraphData","startOf","Object","keys","hour","group","open","high","maxBy","low","minBy","close","x","Date","y","orderCancellingSelector","status","orderFillingSelector","balancesLoadingSelector","etherBalanceSelector","tokenBalanceSelector","exchangeEtherBalanceSelector","exchangeTokenBalanceSelector","etherDepositAmountSelector","amount","etherWithdrawAmountSelector","tokenDepositAmountSelector","tokenWithdrawAmountSelector","buyOrderSelector","sellOrderSelector","Navbar","Component","render","className","href","type","this","props","target","rel","connect","Spinner","renderOrder","dispatch","exchange","OverlayTrigger","placement","overlay","Tooltip","onClick","methods","fillOrder","send","from","on","hash","error","console","log","window","alert","showOrderBook","orderBook","OrderBook","orderFilling","Trades","showMyFilledOrders","myFilledOrders","showMyOpenOrders","myOpenOrders","cancelOrder","MyTransactions","Tabs","defaultActiveKey","Tab","eventKey","title","myOpenOrdersLoaded","orderCancelling","chartOptions","chart","animations","enabled","toolbar","show","width","tooltip","theme","style","fontSize","fontFamily","undefined","formatter","marker","items","display","fixed","position","offsetX","offsetY","xaxis","labels","colors","cssClass","yaxis","minWidth","maxWidth","color","rotate","priceSymbol","output","PriceChart","priceChartLoaded","priceChart","options","height","showForm","web3","etherBalance","tokenBalance","exchangeEtherBalance","exchangeTokenBalance","etherDepositAmount","token","tokenDepositAmount","etherWithdrawAmount","tokenWithdrawAmount","onSubmit","event","preventDefault","depositEther","value","utils","toWei","placeholder","onChange","required","approve","address","depositToken","withdrawEther","withdrawToken","Balance","componentWillMount","loadBlockchainData","async","eth","getBalance","balanceOf","call","exchangeEtherBalanceLoaded","exchangeTokenBalanceLoaded","loadBalances","balancesLoading","buyOrder","sellOrder","showBuyTotal","showSellTotal","tokenGet","price","toString","makeOrder","makeBuyOrder","makeSellOrder","NewOrder","making","Content","getPastEvents","fromBlock","toBlock","returnValues","loadAllOrders","events","Cancel","Trade","Deposit","Withdraw","Order","subscribeToEvents","App","ethereum","Web3","connection","location","assign","loadWeb3","networkId","net","getId","accounts","getAccounts","web3AccountLoaded","loadAccount","Contract","Token","abi","networks","contract","loadToken","Exchange","loadExchange","contractsLoaded","rootReducer","combineReducers","action","index","findIndex","loggerMiddleware","createLogger","middleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Boolean","hostname","match","preloadedState","ReactDOM","store","createStore","applyMiddleware","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e59abdfc.chunk.js","sourcesContent":["export const ETHER_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GREEN = 'success'\nexport const RED = 'danger'\n\nexport const DECIMALS = (10**18)\n\n// Shortcut to avoid passing around web3 connection\nexport const ether = (wei) => {\n  if(wei) {\n    return(wei / DECIMALS) // 18 decimal places\n  }\n}\n\n// Tokens and ether havesame decimal resolution\nexport const tokens = ether\n","import { get, groupBy, reject, maxBy, minBy } from 'lodash'\nimport { createSelector } from 'reselect'\nimport moment from 'moment'\nimport { ETHER_ADDRESS, GREEN, RED, ether, tokens } from '../helpers'\n\n// TODO: Move me to helpers file\nexport const formatBalance = (balance) => {\n  const precision = 100 // 2 decimal places\n\n  balance = ether(balance)\n  balance = Math.round(balance * precision) / precision // Use 2 decimal places\n\n  return balance\n}\n\nconst account = state => get(state, 'web3.account')\nexport const accountSelector = createSelector(account, a => a)\n\nconst web3 = state => get(state, 'web3.connection')\nexport const web3Selector = createSelector(web3, w => w)\n\nconst tokenLoaded = state => get(state, 'token.loaded', false)\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl)\n\nconst token = state => get(state, 'token.contract')\nexport const tokenSelector = createSelector(token, t => t)\n\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false)\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el)\n\nconst exchange = state => get(state, 'exchange.contract')\nexport const exchangeSelector = createSelector(exchange, e => e)\n\nexport const contractsLoadedSelector = createSelector(\n  tokenLoaded,\n  exchangeLoaded,\n  (tl, el) => (tl && el)\n)\n\n// All Orders\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false)\nconst allOrders = state => get(state, 'exchange.allOrders.data', [])\n\n// Cancelled orders\nconst cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false)\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, loaded => loaded)\n\nconst cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', [])\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, o => o)\n\n// Filled Orders\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false)\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nconst filledOrders = state => get(state, 'exchange.filledOrders.data', [])\nexport const filledOrdersSelector = createSelector(\n  filledOrders,\n  (orders) => {\n    // Sort orders by date ascending for price comparison\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n    // Decorate the orders\n    orders = decorateFilledOrders(orders)\n    // Sort orders by date descending for display\n    orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n    return orders\n  }\n)\n\nconst decorateFilledOrders = (orders) => {\n  // Track previous order to compare history\n  let previousOrder = orders[0]\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateFilledOrder(order, previousOrder)\n      previousOrder = order // Update the previous order once it's decorated\n      return order\n    })\n  )\n}\n\nconst decorateOrder = (order) => {\n  let etherAmount\n  let tokenAmount\n\n  if(order.tokenGive === ETHER_ADDRESS) {\n    etherAmount = order.amountGive\n    tokenAmount = order.amountGet\n  } else {\n    etherAmount = order.amountGet\n    tokenAmount = order.amountGive\n  }\n\n  // Calculate token price to 5 decimal places\n  const precision = 100000\n  let tokenPrice = (etherAmount / tokenAmount)\n  tokenPrice = Math.round(tokenPrice * precision) / precision\n\n  return({\n    ...order,\n    etherAmount: ether(etherAmount),\n    tokenAmount: tokens(tokenAmount),\n    tokenPrice,\n    formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n  })\n}\n\nconst decorateFilledOrder = (order, previousOrder) => {\n  return({\n    ...order,\n    tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n  })\n}\n\nconst tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\n  // Show green price if only one order exists\n  if(previousOrder.id === orderId) {\n    return GREEN\n  }\n\n  // Show green price if order price higher than previous order\n  // Show red price if order price lower than previous order\n  if(previousOrder.tokenPrice <= tokenPrice) {\n    return GREEN // success\n  } else {\n    return RED // danger\n  }\n}\n\nconst openOrders = state => {\n  const all = allOrders(state)\n  const filled = filledOrders(state)\n  const cancelled = cancelledOrders(state)\n\n  const openOrders = reject(all, (order) => {\n    const orderFilled = filled.some((o) => o.id === order.id)\n    const orderCancelled = cancelled.some((o) => o.id === order.id)\n    return(orderFilled || orderCancelled)\n  })\n\n  return openOrders\n}\n\n\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state)\nexport const orderBookLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\n\n// Create the order book\nexport const orderBookSelector = createSelector(\n  openOrders,\n  (orders) => {\n    // Decorate orders\n    orders = decorateOrderBookOrders(orders)\n    // Group orders by \"orderType\"\n    orders = groupBy(orders, 'orderType')\n    // Fetch buy orders\n    const buyOrders = get(orders, 'buy', [])\n    // Sort buy orders by token price\n    orders = {\n      ...orders,\n      buyOrders: buyOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n    }\n    // Fetch sell orders\n    const sellOrders = get(orders, 'sell', [])\n    // Sort sell orders by token price\n    orders = {\n      ...orders,\n      sellOrders: sellOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n    }\n    return orders\n  }\n)\n\nconst decorateOrderBookOrders = (orders) => {\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateOrderBookOrder(order)\n      return(order)\n    })\n  )\n}\n\nconst decorateOrderBookOrder = (order) => {\n  const orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n  return({\n    ...order,\n    orderType,\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n    orderFillAction: orderType === 'buy' ? 'sell' : 'buy'\n  })\n}\n\nexport const myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nexport const myFilledOrdersSelector = createSelector(\n  account,\n  filledOrders,\n  (account, orders) => {\n    // Find our orders\n    orders = orders.filter((o) => o.user === account || o.userFill === account)\n    // Sort by date ascending\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n    // Decorate orders - add display attributes\n    orders = decorateMyFilledOrders(orders, account)\n    return orders\n  }\n)\n\nconst decorateMyFilledOrders = (orders, account) => {\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateMyFilledOrder(order, account)\n      return(order)\n    })\n  )\n}\n\nconst decorateMyFilledOrder = (order, account) => {\n  const myOrder = order.user === account\n\n  let orderType\n  if(myOrder) {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n  } else {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy'\n  }\n\n  return({\n    ...order,\n    orderType,\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n    orderSign: (orderType === 'buy' ? '+' : '-')\n  })\n}\n\nexport const myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\n\nexport const myOpenOrdersSelector = createSelector(\n  account,\n  openOrders,\n  (account, orders) => {\n    // Filter orders created by current account\n    orders = orders.filter((o) => o.user === account)\n    // Decorate orders - add display attributes\n    orders = decorateMyOpenOrders(orders)\n    // Sort orders by date descending\n    orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n    return orders\n  }\n)\n\nconst decorateMyOpenOrders = (orders, account) => {\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateMyOpenOrder(order, account)\n      return(order)\n    })\n  )\n}\n\nconst decorateMyOpenOrder = (order, account) => {\n  let orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n\n  return({\n    ...order,\n    orderType,\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED)\n  })\n}\n\nexport const priceChartLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nexport const priceChartSelector = createSelector(\n  filledOrders,\n  (orders) => {\n    // Sort orders by date ascending to compare history\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n    // Decorate orders - add display attributes\n    orders = orders.map((o) => decorateOrder(o))\n    // Get last 2 order for final price & price change\n    let secondLastOrder, lastOrder\n    [secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length)\n    // get last order price\n    const lastPrice = get(lastOrder, 'tokenPrice', 0)\n    // get second last order price\n    const secondLastPrice = get(secondLastOrder, 'tokenPrice', 0)\n\n    return({\n      lastPrice,\n      lastPriceChange: (lastPrice >= secondLastPrice ? '+' : '-'),\n      series: [{\n        data: buildGraphData(orders)\n      }]\n    })\n  }\n)\n\nconst buildGraphData = (orders) => {\n  // Group the orders by hour for the graph\n  orders = groupBy(orders, (o) => moment.unix(o.timestamp).startOf('hour').format())\n  // Get each hour where data exists\n  const hours = Object.keys(orders)\n  // Build the graph series\n  const graphData = hours.map((hour) => {\n    // Fetch all the orders from current hour\n    const group = orders[hour]\n    // Calculate price values - open, high, low, close\n    const open = group[0] // first order\n    const high = maxBy(group, 'tokenPrice') // high price\n    const low = minBy(group, 'tokenPrice') // low price\n    const close = group[group.length - 1] // last order\n\n    return({\n      x: new Date(hour),\n      y: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\n    })\n  })\n\n  return graphData\n}\n\nconst orderCancelling = state => get(state, 'exchange.orderCancelling', false)\nexport const orderCancellingSelector = createSelector(orderCancelling, status => status)\n\nconst orderFilling = state => get(state, 'exchange.orderFilling', false)\nexport const orderFillingSelector = createSelector(orderFilling, status => status)\n\n// BALANCES\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true)\nexport const balancesLoadingSelector = createSelector(balancesLoading, status => status)\n\nconst etherBalance = state => get(state, 'web3.balance', 0)\nexport const etherBalanceSelector = createSelector(\n  etherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst tokenBalance = state => get(state, 'token.balance', 0)\nexport const tokenBalanceSelector = createSelector(\n  tokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance', 0)\nexport const exchangeEtherBalanceSelector = createSelector(\n  exchangeEtherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0)\nexport const exchangeTokenBalanceSelector = createSelector(\n  exchangeTokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst etherDepositAmount = state => get(state, 'exchange.etherDepositAmount', null)\nexport const etherDepositAmountSelector = createSelector(etherDepositAmount, amount => amount)\n\nconst etherWithdrawAmount = state => get(state, 'exchange.etherWithdrawAmount', null)\nexport const etherWithdrawAmountSelector = createSelector(etherWithdrawAmount, amount => amount)\n\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', null)\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, amount => amount)\n\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', null)\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, amount => amount)\n\nconst buyOrder = state => get(state, 'exchange.buyOrder', {})\nexport const buyOrderSelector = createSelector(buyOrder, order => order)\n\nconst sellOrder = state => get(state, 'exchange.sellOrder', {})\nexport const sellOrderSelector = createSelector(sellOrder, order => order)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { accountSelector } from '../store/selectors'\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n        <a className=\"navbar-brand\" href=\"#/\">BDB/ETH -- Token Exchange</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item\">\n            <a\n              className=\"nav-link small\"\n              href={`https://etherscan.io/address/${this.props.account}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {this.props.account}\n            </a>\n          </li>\n        </ul>\n      </nav>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    account: accountSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(Navbar)\n","import React from 'react';\n\nexport default function Spinner({ type }) {\n  if(type === 'table') {\n    return(<tbody className=\"spinner-border text-light text-center\"></tbody>)\n  } else {\n    return(<div className=\"spinner-border text-light text-center\"></div>)\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap'\nimport Spinner from './Spinner'\nimport {\n  orderBookSelector,\n  orderBookLoadedSelector,\n  exchangeSelector,\n  accountSelector,\n  orderFillingSelector\n} from '../store/selectors'\nimport { fillOrder } from '../store/interactions'\n\nconst renderOrder = (order, props) => {\n  const { dispatch, exchange, account } = props\n\n  return(\n    <OverlayTrigger\n      key={order.id}\n      placement='auto'\n      overlay={\n        <Tooltip id={order.id}>\n          {`Click here to ${order.orderFillAction}`}\n        </Tooltip>\n      }\n    >\n      <tr\n        key={order.id}\n        className=\"order-book-order\"\n        onClick={(e) => fillOrder(dispatch, exchange, order, account)}\n      >\n        <td>{order.tokenAmount}</td>\n        <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\n        <td>{order.etherAmount}</td>\n      </tr>\n    </OverlayTrigger>\n  )\n}\n\nconst showOrderBook = (props) => {\n  const { orderBook } = props\n\n  return(\n    <tbody>\n      {orderBook.sellOrders.map((order) => renderOrder(order, props))}\n      <tr>\n        <th>BDB</th>\n        <th>BDB/ETH</th>\n        <th>ETH</th>\n      </tr>\n      {orderBook.buyOrders.map((order) => renderOrder(order, props))}\n    </tbody>\n  )\n}\n\nclass OrderBook extends Component {\n  render() {\n    return (\n      <div className=\"vertical\">\n        <div className=\"card bg-dark text-white\">\n          <div className=\"card-header\">\n            Order Book\n          </div>\n          <div className=\"card-body order-book\">\n            <table className=\"table table-dark table-sm small\">\n              { this.props.showOrderBook ? showOrderBook(this.props) : <Spinner type='table' /> }\n            </table>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  const orderBookLoaded = orderBookLoadedSelector(state)\n  const orderFilling = orderFillingSelector(state)\n\n  return {\n    orderBook: orderBookSelector(state),\n    showOrderBook: orderBookLoaded && !orderFilling,\n    exchange: exchangeSelector(state),\n    account: accountSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(OrderBook);\n\n\n\n\n\n\n\n\n\n\n\n","import Web3 from 'web3'\nimport {\n  web3Loaded,\n  web3AccountLoaded,\n  tokenLoaded,\n  exchangeLoaded,\n  cancelledOrdersLoaded,\n  filledOrdersLoaded,\n  allOrdersLoaded,\n  orderCancelling,\n  orderCancelled,\n  orderFilling,\n  orderFilled,\n  etherBalanceLoaded,\n  tokenBalanceLoaded,\n  exchangeEtherBalanceLoaded,\n  exchangeTokenBalanceLoaded,\n  balancesLoaded,\n  balancesLoading,\n  buyOrderMaking,\n  sellOrderMaking,\n  orderMade\n} from './actions'\nimport Token from '../abis/Token.json'\nimport Exchange from '../abis/Exchange.json'\nimport { ETHER_ADDRESS } from '../helpers'\n\nexport const loadWeb3 = async (dispatch) => {\n  if(typeof window.ethereum!=='undefined'){\n    const web3 = new Web3(window.ethereum)\n    dispatch(web3Loaded(web3))\n    return web3\n  } else {\n    window.alert('Please install MetaMask')\n    window.location.assign(\"https://metamask.io/\")\n  }\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n  const accounts = await web3.eth.getAccounts()\n  const account = await accounts[0]\n  if(typeof account !== 'undefined'){\n    dispatch(web3AccountLoaded(account))\n    return account\n  } else {\n    window.alert('Please login with MetaMask')\n    return null\n  }\n}\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n  try {\n    const token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address)\n    dispatch(tokenLoaded(token))\n    return token\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}\n\nexport const loadExchange = async (web3, networkId, dispatch) => {\n  try {\n    const exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address)\n    dispatch(exchangeLoaded(exchange))\n    return exchange\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}\n\nexport const loadAllOrders = async (exchange, dispatch) => {\n  // Fetch cancelled orders with the \"Cancel\" event stream\n  const cancelStream = await exchange.getPastEvents('Cancel', { fromBlock: 0, toBlock: 'latest' })\n  // Format cancelled orders\n  const cancelledOrders = cancelStream.map((event) => event.returnValues)\n  // Add cancelled orders to the redux store\n  dispatch(cancelledOrdersLoaded(cancelledOrders))\n\n  // Fetch filled orders with the \"Trade\" event stream\n  const tradeStream = await exchange.getPastEvents('Trade', { fromBlock: 0, toBlock: 'latest' })\n  // Format filled orders\n  const filledOrders = tradeStream.map((event) => event.returnValues)\n  // Add cancelled orders to the redux store\n  dispatch(filledOrdersLoaded(filledOrders))\n\n  // Load order stream\n  const orderStream = await exchange.getPastEvents('Order', { fromBlock: 0,  toBlock: 'latest' })\n  // Format order stream\n  const allOrders = orderStream.map((event) => event.returnValues)\n  // Add open orders to the redux store\n  dispatch(allOrdersLoaded(allOrders))\n}\n\nexport const subscribeToEvents = async (exchange, dispatch) => {\n  exchange.events.Cancel({}, (error, event) => {\n    dispatch(orderCancelled(event.returnValues))\n  })\n\n  exchange.events.Trade({}, (error, event) => {\n    dispatch(orderFilled(event.returnValues))\n  })\n\n  exchange.events.Deposit({}, (error, event) => {\n    dispatch(balancesLoaded())\n  })\n\n  exchange.events.Withdraw({}, (error, event) => {\n    dispatch(balancesLoaded())\n  })\n\n  exchange.events.Order({}, (error, event) => {\n    dispatch(orderMade(event.returnValues))\n  })\n}\n\nexport const cancelOrder = (dispatch, exchange, order, account) => {\n  exchange.methods.cancelOrder(order.id).send({ from: account })\n  .on('transactionHash', (hash) => {\n     dispatch(orderCancelling())\n  })\n  .on('error', (error) => {\n    console.log(error)\n    window.alert('There was an error!')\n  })\n}\n\nexport const fillOrder = (dispatch, exchange, order, account) => {\n  exchange.methods.fillOrder(order.id).send({ from: account })\n  .on('transactionHash', (hash) => {\n     dispatch(orderFilling())\n  })\n  .on('error', (error) => {\n    console.log(error)\n    window.alert('There was an error!')\n  })\n}\n\nexport const loadBalances = async (dispatch, web3, exchange, token, account) => {\n  if(typeof account !== 'undefined') {\n      // Ether balance in wallet\n      const etherBalance = await web3.eth.getBalance(account)\n      dispatch(etherBalanceLoaded(etherBalance))\n\n      // Token balance in wallet\n      const tokenBalance = await token.methods.balanceOf(account).call()\n      dispatch(tokenBalanceLoaded(tokenBalance))\n\n      // Ether balance in exchange\n      const exchangeEtherBalance = await exchange.methods.balanceOf(ETHER_ADDRESS, account).call()\n      dispatch(exchangeEtherBalanceLoaded(exchangeEtherBalance))\n\n      // Token balance in exchange\n      const exchangeTokenBalance = await exchange.methods.balanceOf(token.options.address, account).call()\n      dispatch(exchangeTokenBalanceLoaded(exchangeTokenBalance))\n\n      // Trigger all balances loaded\n      dispatch(balancesLoaded())\n    } else {\n      window.alert('Please login with MetaMask')\n    }\n}\n\nexport const depositEther = (dispatch, exchange, web3, amount, account) => {\n  exchange.methods.depositEther().send({ from: account,  value: web3.utils.toWei(amount, 'ether') })\n  .on('transactionHash', (hash) => {\n    dispatch(balancesLoading())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\nexport const withdrawEther = (dispatch, exchange, web3, amount, account) => {\n  exchange.methods.withdrawEther(web3.utils.toWei(amount, 'ether')).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(balancesLoading())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\nexport const depositToken = (dispatch, exchange, web3, token, amount, account) => {\n  amount = web3.utils.toWei(amount, 'ether')\n\n  token.methods.approve(exchange.options.address, amount).send({ from: account })\n  .on('transactionHash', (hash) => {\n    exchange.methods.depositToken(token.options.address, amount).send({ from: account })\n    .on('transactionHash', (hash) => {\n      dispatch(balancesLoading())\n    })\n    .on('error',(error) => {\n      console.error(error)\n      window.alert(`There was an error!`)\n    })\n  })\n}\n\nexport const withdrawToken = (dispatch, exchange, web3, token, amount, account) => {\n  exchange.methods.withdrawToken(token.options.address, web3.utils.toWei(amount, 'ether')).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(balancesLoading())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\nexport const makeBuyOrder = (dispatch, exchange, token, web3, order, account) => {\n  const tokenGet = token.options.address\n  const amountGet = web3.utils.toWei(order.amount, 'ether')\n  const tokenGive = ETHER_ADDRESS\n  const amountGive = web3.utils.toWei((order.amount * order.price).toString(), 'ether')\n\n  exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(buyOrderMaking())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\nexport const makeSellOrder = (dispatch, exchange, token, web3, order, account) => {\n  const tokenGet = ETHER_ADDRESS\n  const amountGet = web3.utils.toWei((order.amount * order.price).toString(), 'ether')\n  const tokenGive = token.options.address\n  const amountGive = web3.utils.toWei(order.amount, 'ether')\n\n  exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(sellOrderMaking())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n","// WEB3\nexport function web3Loaded(connection) {\n  return {\n    type: 'WEB3_LOADED',\n    connection\n  }\n}\n\nexport function web3AccountLoaded(account) {\n  return {\n    type: 'WEB3_ACCOUNT_LOADED',\n    account\n  }\n}\n\n// TOKEN\nexport function tokenLoaded(contract) {\n  return {\n    type: 'TOKEN_LOADED',\n    contract\n  }\n}\n\n// EXCHANGE\nexport function exchangeLoaded(contract) {\n  return {\n    type: 'EXCHANGE_LOADED',\n    contract\n  }\n}\n\nexport function cancelledOrdersLoaded(cancelledOrders) {\n  return {\n    type: 'CANCELLED_ORDERS_LOADED',\n    cancelledOrders\n  }\n}\n\nexport function filledOrdersLoaded(filledOrders) {\n  return {\n    type: 'FILLED_ORDERS_LOADED',\n    filledOrders\n  }\n}\n\nexport function allOrdersLoaded(allOrders) {\n  return {\n    type: 'ALL_ORDERS_LOADED',\n    allOrders\n  }\n}\n\n// Cancel Order\nexport function orderCancelling() {\n  return {\n    type: 'ORDER_CANCELLING'\n  }\n}\n\nexport function orderCancelled(order) {\n  return {\n    type: 'ORDER_CANCELLED',\n    order\n  }\n}\n\n// Fill Order\nexport function orderFilling() {\n  return {\n    type: 'ORDER_FILLING'\n  }\n}\n\nexport function orderFilled(order) {\n  return {\n    type: 'ORDER_FILLED',\n    order\n  }\n}\n\n// Balances\nexport function etherBalanceLoaded(balance) {\n  return {\n    type: 'ETHER_BALANCE_LOADED',\n    balance\n  }\n}\n\nexport function tokenBalanceLoaded(balance) {\n  return {\n    type: 'TOKEN_BALANCE_LOADED',\n    balance\n  }\n}\n\nexport function exchangeEtherBalanceLoaded(balance) {\n  return {\n    type: 'EXCHANGE_ETHER_BALANCE_LOADED',\n    balance\n  }\n}\n\nexport function exchangeTokenBalanceLoaded(balance) {\n  return {\n    type: 'EXCHANGE_TOKEN_BALANCE_LOADED',\n    balance\n  }\n}\n\nexport function balancesLoaded() {\n  return {\n    type: 'BALANCES_LOADED'\n  }\n}\n\nexport function balancesLoading() {\n  return {\n    type: 'BALANCES_LOADING'\n  }\n}\n\nexport function etherDepositAmountChanged(amount) {\n  return {\n    type: 'ETHER_DEPOSIT_AMOUNT_CHANGED',\n    amount\n  }\n}\n\nexport function etherWithdrawAmountChanged(amount) {\n  return {\n    type: 'ETHER_WITHDRAW_AMOUNT_CHANGED',\n    amount\n  }\n}\n\nexport function tokenDepositAmountChanged(amount) {\n  return {\n    type: 'TOKEN_DEPOSIT_AMOUNT_CHANGED',\n    amount\n  }\n}\n\nexport function tokenWithdrawAmountChanged(amount) {\n  return {\n    type: 'TOKEN_WITHDRAW_AMOUNT_CHANGED',\n    amount\n  }\n}\n\n// Buy Order\nexport function buyOrderAmountChanged(amount) {\n  return {\n    type: 'BUY_ORDER_AMOUNT_CHANGED',\n    amount\n  }\n}\n\nexport function buyOrderPriceChanged(price) {\n  return {\n    type: 'BUY_ORDER_PRICE_CHANGED',\n    price\n  }\n}\n\nexport function buyOrderMaking(price) {\n  return {\n    type: 'BUY_ORDER_MAKING'\n  }\n}\n\n// Generic Order\nexport function orderMade(order) {\n  return {\n    type: 'ORDER_MADE',\n    order\n  }\n}\n\n// Sell Order\nexport function sellOrderAmountChanged(amount) {\n  return {\n    type: 'SELL_ORDER_AMOUNT_CHANGED',\n    amount\n  }\n}\n\nexport function sellOrderPriceChanged(price) {\n  return {\n    type: 'SELL_ORDER_PRICE_CHANGED',\n    price\n  }\n}\n\nexport function sellOrderMaking(price) {\n  return {\n    type: 'SELL_ORDER_MAKING'\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Spinner from './Spinner'\nimport {\n  filledOrdersLoadedSelector,\n  filledOrdersSelector\n} from '../store/selectors'\n\nconst showFilledOrders = (filledOrders) => {\n  return(\n    <tbody>\n      { filledOrders.map((order) => {\n        return(\n          <tr className={`order-${order.id}`} key={order.id}>\n            <td className=\"text-muted\">{order.formattedTimestamp}</td>\n            <td>{order.tokenAmount}</td>\n            <td className={`text-${order.tokenPriceClass}`}>{order.tokenPrice}</td>\n          </tr>\n        )\n      }) }\n    </tbody>\n  )\n}\n\nclass Trades extends Component {\n  render() {\n    return (\n      <div className=\"vertical\">\n        <div className=\"card bg-dark text-white\">\n          <div className=\"card-header\">\n            Trades\n          </div>\n          <div className=\"card-body\">\n            <table className=\"table table-dark table-sm small\">\n              <thead>\n                <tr>\n                  <th>Time</th>\n                  <th>BDB</th>\n                  <th>BDB/ETH</th>\n                </tr>\n              </thead>\n              { this.props.filledOrdersLoaded ? showFilledOrders(this.props.filledOrders) : <Spinner type=\"table\" />}\n            </table>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    filledOrdersLoaded: filledOrdersLoadedSelector(state),\n    filledOrders: filledOrdersSelector(state),\n  }\n}\n\nexport default connect(mapStateToProps)(Trades)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Tabs, Tab } from 'react-bootstrap'\nimport Spinner from './Spinner'\nimport {\n  myFilledOrdersLoadedSelector,\n  myFilledOrdersSelector,\n  myOpenOrdersLoadedSelector,\n  myOpenOrdersSelector,\n  exchangeSelector,\n  accountSelector,\n  orderCancellingSelector\n} from '../store/selectors'\nimport { cancelOrder } from '../store/interactions'\n\nconst showMyFilledOrders = (props) => {\n  const { myFilledOrders } = props\n\n  return(\n    <tbody>\n      { myFilledOrders.map((order) => {\n        return (\n          <tr key={order.id}>\n            <td className=\"text-muted\">{order.formattedTimestamp}</td>\n            <td className={`text-${order.orderTypeClass}`}>{order.orderSign}{order.tokenAmount}</td>\n            <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\n          </tr>\n        )\n      }) }\n    </tbody>\n  )\n}\n\nconst showMyOpenOrders = (props) => {\n  const { myOpenOrders, dispatch, exchange, account } = props\n\n  return(\n    <tbody>\n      { myOpenOrders.map((order) => {\n        return (\n          <tr key={order.id}>\n            <td className={`text-${order.orderTypeClass}`}>{order.tokenAmount}</td>\n            <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\n            <td\n              className=\"text-muted cancel-order\"\n              onClick={(e) => {\n                cancelOrder(dispatch, exchange, order, account)\n              }}\n            >X</td>\n          </tr>\n        )\n      }) }\n    </tbody>\n  )\n}\n\nclass MyTransactions extends Component {\n  render() {\n    return (\n      <div className=\"card bg-dark text-white\">\n        <div className=\"card-header\">\n          My Transactions\n        </div>\n        <div className=\"card-body\">\n          <Tabs defaultActiveKey=\"trades\" className=\"bg-dark text-white\">\n            <Tab eventKey=\"trades\" title=\"Trades\" className=\"bg-dark\">\n              <table className=\"table table-dark table-sm small\">\n                <thead>\n                  <tr>\n                    <th>Time</th>\n                    <th>BDB</th>\n                    <th>BDB/ETH</th>\n                  </tr>\n                </thead>\n                { this.props.showMyFilledOrders ? showMyFilledOrders(this.props) : <Spinner type=\"table\" />}\n              </table>\n            </Tab>\n            <Tab eventKey=\"orders\" title=\"Orders\">\n              <table className=\"table table-dark table-sm small\">\n                <thead>\n                  <tr>\n                    <th>Amount</th>\n                    <th>BDB/ETH</th>\n                    <th>Cancel</th>\n                  </tr>\n                </thead>\n                { this.props.showMyOpenOrders ? showMyOpenOrders(this.props) : <Spinner type=\"table\" />}\n              </table>\n            </Tab>\n          </Tabs>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  const myOpenOrdersLoaded = myOpenOrdersLoadedSelector(state)\n  const orderCancelling = orderCancellingSelector(state)\n\n  return {\n    myFilledOrders: myFilledOrdersSelector(state),\n    showMyFilledOrders: myFilledOrdersLoadedSelector(state),\n    myOpenOrders: myOpenOrdersSelector(state),\n    showMyOpenOrders: myOpenOrdersLoaded && !orderCancelling,\n    exchange: exchangeSelector(state),\n    account: accountSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(MyTransactions);\n\n\n\n\n\n\n\n\n\n\n","export const chartOptions = {\n  chart: {\n    animations: { enabled: false },\n    toolbar: { show: false },\n    width: '100px'\n  },\n  tooltip: {\n    enabled: true,\n    theme: false,\n    style: {\n      fontSize: '12px',\n      fontFamily: undefined\n    },\n    x: {\n        show: false,\n        format: 'dd MMM',\n        formatter: undefined,\n    },\n    y: {\n      show: true,\n      title: 'price'\n    },\n    marker: {\n      show: false,\n    },\n    items: {\n       display: 'flex',\n    },\n    fixed: {\n        enabled: false,\n        position: 'topRight',\n        offsetX: 0,\n        offsetY: 0,\n    },\n  },\n  xaxis: {\n    type: 'datetime',\n    labels: {\n      show: true,\n      style: {\n          colors: '#fff',\n          fontSize: '8px',\n          cssClass: 'apexcharts-xaxis-label',\n      },\n    },\n  },\n  yaxis: {\n    labels: {\n      show: true,\n      minWidth: 0,\n      maxWidth: 160,\n      style: {\n        color: '#fff',\n        fontSize: '8px',\n        cssClass: 'apexcharts-yaxis-label',\n      },\n      offsetX: 0,\n      offsetY: 0,\n      rotate: 0,\n    }\n  }\n}\n\nexport const dummyData = [\n  {\n    data: [\n      {\n        x: new Date(1538778600000),\n        y: [6629.81, 6650.5, 6623.04, 6633.33]\n      },\n      {\n        x: new Date(1538780400000),\n        y: [6632.01, 6643.59, 6620, 6630.11]\n      },\n      {\n        x: new Date(1538782200000),\n        y: [6630.71, 6648.95, 6623.34, 6635.65]\n      },\n      {\n        x: new Date(1538784000000),\n        y: [6635.65, 6651, 6629.67, 6638.24]\n      },\n      {\n        x: new Date(1538785800000),\n        y: [6638.24, 6640, 6620, 6624.47]\n      },\n      {\n        x: new Date(1538787600000),\n        y: [6624.53, 6636.03, 6621.68, 6624.31]\n      },\n      {\n        x: new Date(1538789400000),\n        y: [6624.61, 6632.2, 6617, 6626.02]\n      },\n      {\n        x: new Date(1538791200000),\n        y: [6627, 6627.62, 6584.22, 6603.02]\n      },\n      {\n        x: new Date(1538793000000),\n        y: [6605, 6608.03, 6598.95, 6604.01]\n      },\n      {\n        x: new Date(1538794800000),\n        y: [6604.5, 6614.4, 6602.26, 6608.02]\n      },\n      {\n        x: new Date(1538796600000),\n        y: [6608.02, 6610.68, 6601.99, 6608.91]\n      },\n      {\n        x: new Date(1538798400000),\n        y: [6608.91, 6618.99, 6608.01, 6612]\n      },\n      {\n        x: new Date(1538800200000),\n        y: [6612, 6615.13, 6605.09, 6612]\n      },\n      {\n        x: new Date(1538802000000),\n        y: [6612, 6624.12, 6608.43, 6622.95]\n      },\n      {\n        x: new Date(1538803800000),\n        y: [6623.91, 6623.91, 6615, 6615.67]\n      },\n      {\n        x: new Date(1538805600000),\n        y: [6618.69, 6618.74, 6610, 6610.4]\n      },\n      {\n        x: new Date(1538807400000),\n        y: [6611, 6622.78, 6610.4, 6614.9]\n      },\n      {\n        x: new Date(1538809200000),\n        y: [6614.9, 6626.2, 6613.33, 6623.45]\n      },\n      {\n        x: new Date(1538811000000),\n        y: [6623.48, 6627, 6618.38, 6620.35]\n      },\n      {\n        x: new Date(1538812800000),\n        y: [6619.43, 6620.35, 6610.05, 6615.53]\n      },\n      {\n        x: new Date(1538814600000),\n        y: [6615.53, 6617.93, 6610, 6615.19]\n      },\n      {\n        x: new Date(1538816400000),\n        y: [6615.19, 6621.6, 6608.2, 6620]\n      },\n      {\n        x: new Date(1538818200000),\n        y: [6619.54, 6625.17, 6614.15, 6620]\n      },\n      {\n        x: new Date(1538820000000),\n        y: [6620.33, 6634.15, 6617.24, 6624.61]\n      },\n      {\n        x: new Date(1538821800000),\n        y: [6625.95, 6626, 6611.66, 6617.58]\n      },\n      {\n        x: new Date(1538823600000),\n        y: [6619, 6625.97, 6595.27, 6598.86]\n      },\n      {\n        x: new Date(1538825400000),\n        y: [6598.86, 6598.88, 6570, 6587.16]\n      },\n      {\n        x: new Date(1538827200000),\n        y: [6588.86, 6600, 6580, 6593.4]\n      },\n      {\n        x: new Date(1538829000000),\n        y: [6593.99, 6598.89, 6585, 6587.81]\n      },\n      {\n        x: new Date(1538830800000),\n        y: [6587.81, 6592.73, 6567.14, 6578]\n      },\n      {\n        x: new Date(1538832600000),\n        y: [6578.35, 6581.72, 6567.39, 6579]\n      },\n      {\n        x: new Date(1538834400000),\n        y: [6579.38, 6580.92, 6566.77, 6575.96]\n      },\n      {\n        x: new Date(1538836200000),\n        y: [6575.96, 6589, 6571.77, 6588.92]\n      },\n      {\n        x: new Date(1538838000000),\n        y: [6588.92, 6594, 6577.55, 6589.22]\n      },\n      {\n        x: new Date(1538839800000),\n        y: [6589.3, 6598.89, 6589.1, 6596.08]\n      },\n      {\n        x: new Date(1538841600000),\n        y: [6597.5, 6600, 6588.39, 6596.25]\n      },\n      {\n        x: new Date(1538843400000),\n        y: [6598.03, 6600, 6588.73, 6595.97]\n      },\n      {\n        x: new Date(1538845200000),\n        y: [6595.97, 6602.01, 6588.17, 6602]\n      },\n      {\n        x: new Date(1538847000000),\n        y: [6602, 6607, 6596.51, 6599.95]\n      },\n      {\n        x: new Date(1538848800000),\n        y: [6600.63, 6601.21, 6590.39, 6591.02]\n      },\n      {\n        x: new Date(1538850600000),\n        y: [6591.02, 6603.08, 6591, 6591]\n      },\n      {\n        x: new Date(1538852400000),\n        y: [6591, 6601.32, 6585, 6592]\n      },\n      {\n        x: new Date(1538854200000),\n        y: [6593.13, 6596.01, 6590, 6593.34]\n      },\n      {\n        x: new Date(1538856000000),\n        y: [6593.34, 6604.76, 6582.63, 6593.86]\n      },\n      {\n        x: new Date(1538857800000),\n        y: [6593.86, 6604.28, 6586.57, 6600.01]\n      },\n      {\n        x: new Date(1538859600000),\n        y: [6601.81, 6603.21, 6592.78, 6596.25]\n      },\n      {\n        x: new Date(1538861400000),\n        y: [6596.25, 6604.2, 6590, 6602.99]\n      },\n      {\n        x: new Date(1538863200000),\n        y: [6602.99, 6606, 6584.99, 6587.81]\n      },\n      {\n        x: new Date(1538865000000),\n        y: [6587.81, 6595, 6583.27, 6591.96]\n      },\n      {\n        x: new Date(1538866800000),\n        y: [6591.97, 6596.07, 6585, 6588.39]\n      },\n      {\n        x: new Date(1538868600000),\n        y: [6587.6, 6598.21, 6587.6, 6594.27]\n      },\n      {\n        x: new Date(1538870400000),\n        y: [6596.44, 6601, 6590, 6596.55]\n      },\n      {\n        x: new Date(1538872200000),\n        y: [6598.91, 6605, 6596.61, 6600.02]\n      },\n      {\n        x: new Date(1538874000000),\n        y: [6600.55, 6605, 6589.14, 6593.01]\n      },\n      {\n        x: new Date(1538875800000),\n        y: [6593.15, 6605, 6592, 6603.06]\n      },\n      {\n        x: new Date(1538877600000),\n        y: [6603.07, 6604.5, 6599.09, 6603.89]\n      },\n      {\n        x: new Date(1538879400000),\n        y: [6604.44, 6604.44, 6600, 6603.5]\n      },\n      {\n        x: new Date(1538881200000),\n        y: [6603.5, 6603.99, 6597.5, 6603.86]\n      },\n      {\n        x: new Date(1538883000000),\n        y: [6603.85, 6605, 6600, 6604.07]\n      },\n      {\n        x: new Date(1538884800000),\n        y: [6604.98, 6606, 6604.07, 6606]\n      },\n    ]\n  }\n]\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Chart from 'react-apexcharts'\nimport Spinner from './Spinner'\nimport { chartOptions } from './PriceChart.config'\nimport {\n  priceChartLoadedSelector,\n  priceChartSelector\n} from '../store/selectors'\n\nconst priceSymbol = (lastPriceChange) => {\n  let output\n  if(lastPriceChange === '+') {\n    output = <span className=\"text-success\">&#9650;</span> // Green up tiangle\n  } else {\n    output = <span className=\"text-danger\">&#9660;</span> // Red down triangle\n  }\n  return(output)\n}\n\nconst showPriceChart = (priceChart) => {\n  return(\n    <div className=\"price-chart\">\n      <div className=\"price\">\n        <h4>BDB/ETH &nbsp; {priceSymbol(priceChart.lastPriceChange)} &nbsp; {priceChart.lastPrice}</h4>\n      </div>\n      <Chart options={chartOptions} series={priceChart.series} type='candlestick' width='100%' height='100%' />\n    </div>\n  )\n}\n\nclass PriceChart extends Component {\n  render() {\n    return (\n      <div className=\"card bg-dark text-white\">\n        <div className=\"card-header\">\n          Price Chart\n        </div>\n        <div className=\"card-body\">\n          {this.props.priceChartLoaded ? showPriceChart(this.props.priceChart) : <Spinner />}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n\n  return {\n    priceChartLoaded: priceChartLoadedSelector(state),\n    priceChart: priceChartSelector(state),\n  }\n}\n\nexport default connect(mapStateToProps)(PriceChart)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Tabs, Tab } from 'react-bootstrap'\nimport Spinner from './Spinner'\nimport {\n  loadBalances,\n  depositEther,\n  depositToken,\n  withdrawEther,\n  withdrawToken\n} from '../store/interactions'\nimport {\n  exchangeSelector,\n  tokenSelector,\n  accountSelector,\n  web3Selector,\n  etherBalanceSelector,\n  tokenBalanceSelector,\n  exchangeEtherBalanceSelector,\n  exchangeTokenBalanceSelector,\n  balancesLoadingSelector,\n  etherDepositAmountSelector,\n  etherWithdrawAmountSelector,\n  tokenDepositAmountSelector,\n  tokenWithdrawAmountSelector,\n} from '../store/selectors'\nimport {\n  etherDepositAmountChanged,\n  etherWithdrawAmountChanged,\n  tokenDepositAmountChanged,\n  tokenWithdrawAmountChanged,\n} from '../store/actions'\nconst showForm = (props) => {\n  const {\n    dispatch,\n    exchange,\n    web3,\n    account,\n    etherBalance,\n    tokenBalance,\n    exchangeEtherBalance,\n    exchangeTokenBalance,\n    etherDepositAmount,\n    token,\n    tokenDepositAmount,\n    etherWithdrawAmount,\n    tokenWithdrawAmount\n  } = props\n\n  return(\n    <Tabs defaultActiveKey=\"deposit\" className=\"bg-dark text-white\">\n\n      <Tab eventKey=\"deposit\" title=\"Deposit\" className=\"bg-dark\">\n        <table className=\"table table-dark table-sm small\">\n          <thead>\n            <tr>\n              <th>Token</th>\n              <th>Wallet</th>\n              <th>Exchange</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>ETH</td>\n              <td>{etherBalance}</td>\n              <td>{exchangeEtherBalance}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <form className=\"row\" onSubmit={(event) => {\n          event.preventDefault()\n          depositEther(dispatch, exchange, web3, etherDepositAmount, account)\n        }}>\n          <div className=\"col-12 col-sm pr-sm-2\">\n            <input\n            type=\"text\"\n            placeholder=\"ETH Amount\"\n            onChange={(e) => dispatch( etherDepositAmountChanged(e.target.value) ) }\n            className=\"form-control form-control-sm bg-dark text-white\"\n            required />\n          </div>\n          <div className=\"col-12 col-sm-auto pl-sm-0\">\n            <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\">Deposit</button>\n          </div>\n        </form>\n\n        <table className=\"table table-dark table-sm small\">\n          <tbody>\n            <tr>\n              <td>BDB</td>\n              <td>{tokenBalance}</td>\n              <td>{exchangeTokenBalance}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <form className=\"row\" onSubmit={(event) => {\n          event.preventDefault()\n          depositToken(dispatch, exchange, web3, token, tokenDepositAmount, account)\n        }}>\n          <div className=\"col-12 col-sm pr-sm-2\">\n            <input\n            type=\"text\"\n            placeholder=\"BBD Amount\"\n            onChange={(e) => dispatch( tokenDepositAmountChanged(e.target.value) )}\n            className=\"form-control form-control-sm bg-dark text-white\"\n            required />\n          </div>\n          <div className=\"col-12 col-sm-auto pl-sm-0\">\n            <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\">Deposit</button>\n          </div>\n        </form>\n\n      </Tab>\n\n      <Tab eventKey=\"withdraw\" title=\"Withdraw\" className=\"bg-dark\">\n\n        <table className=\"table table-dark table-sm small\">\n          <thead>\n            <tr>\n              <th>Token</th>\n              <th>Wallet</th>\n              <th>Exchange</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>ETH</td>\n              <td>{etherBalance}</td>\n              <td>{exchangeEtherBalance}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <form className=\"row\" onSubmit={(event) => {\n          event.preventDefault()\n          withdrawEther(dispatch, exchange, web3, etherWithdrawAmount, account)\n        }}>\n          <div className=\"col-12 col-sm pr-sm-2\">\n            <input\n            type=\"text\"\n            placeholder=\"ETH Amount\"\n            onChange={(e) => dispatch( etherWithdrawAmountChanged(e.target.value) )}\n            className=\"form-control form-control-sm bg-dark text-white\"\n            required />\n          </div>\n          <div className=\"col-12 col-sm-auto pl-sm-0\">\n            <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\">Withdraw</button>\n          </div>\n        </form>\n\n        <table className=\"table table-dark table-sm small\">\n          <tbody>\n            <tr>\n              <td>BDB</td>\n              <td>{tokenBalance}</td>\n              <td>{exchangeTokenBalance}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <form className=\"row\" onSubmit={(event) => {\n          event.preventDefault()\n          withdrawToken(dispatch, exchange, web3, token, tokenWithdrawAmount, account)\n        }}>\n          <div className=\"col-12 col-sm pr-sm-2\">\n            <input\n            type=\"text\"\n            placeholder=\"BDB Amount\"\n            onChange={(e) => dispatch( tokenWithdrawAmountChanged(e.target.value) )}\n            className=\"form-control form-control-sm bg-dark text-white\"\n            required />\n          </div>\n          <div className=\"col-12 col-sm-auto pl-sm-0\">\n            <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\">Withdraw</button>\n          </div>\n        </form>\n\n      </Tab>\n    </Tabs>\n  )\n}\n\nclass Balance extends Component {\n  componentWillMount() {\n    this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    const { dispatch, web3, exchange, token, account } = this.props\n    await loadBalances(dispatch, web3, exchange, token, account)\n  }\n\n  render() {\n    return (\n      <div className=\"card bg-dark text-white\">\n        <div className=\"card-header\">\n          Balance\n        </div>\n        <div className=\"card-body\">\n          {this.props.showForm ? showForm(this.props) : <Spinner />}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  const balancesLoading = balancesLoadingSelector(state)\n\n  return {\n    account: accountSelector(state),\n    exchange: exchangeSelector(state),\n    token: tokenSelector(state),\n    web3: web3Selector(state),\n    etherBalance: etherBalanceSelector(state),\n    tokenBalance: tokenBalanceSelector(state),\n    exchangeEtherBalance: exchangeEtherBalanceSelector(state),\n    exchangeTokenBalance: exchangeTokenBalanceSelector(state),\n    balancesLoading,\n    showForm: !balancesLoading,\n    etherDepositAmount: etherDepositAmountSelector(state),\n    etherWithdrawAmount: etherWithdrawAmountSelector(state),\n    tokenDepositAmount: tokenDepositAmountSelector(state),\n    tokenWithdrawAmount: tokenWithdrawAmountSelector(state),\n  }\n}\n\nexport default connect(mapStateToProps)(Balance)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Tabs, Tab } from 'react-bootstrap'\nimport Spinner from './Spinner'\nimport {\n  exchangeSelector,\n  tokenSelector,\n  accountSelector,\n  web3Selector,\n  buyOrderSelector,\n  sellOrderSelector\n} from '../store/selectors'\nimport {\n  buyOrderAmountChanged,\n  buyOrderPriceChanged,\n  sellOrderAmountChanged,\n  sellOrderPriceChanged,\n} from '../store/actions'\nimport {\n  makeBuyOrder,\n  makeSellOrder\n} from '../store/interactions'\n\nconst showForm = (props) => {\n  const {\n    dispatch,\n    buyOrder,\n    exchange,\n    token,\n    web3,\n    account,\n    sellOrder,\n    showBuyTotal,\n    showSellTotal\n  } = props\n\n  return(\n    <Tabs defaultActiveKey=\"buy\" className=\"bg-dark text-white\">\n\n      <Tab eventKey=\"buy\" title=\"Buy\" className=\"bg-dark\">\n\n          <form onSubmit={(event) => {\n            event.preventDefault()\n            makeBuyOrder(dispatch, exchange, token, web3, buyOrder, account)\n          }}>\n          <div className=\"form-group small\">\n            <label>Buy Amount (BDB)</label>\n            <div className=\"input-group\">\n              <input\n                type=\"text\"\n                className=\"form-control form-control-sm bg-dark text-white\"\n                placeholder=\"Buy Amount\"\n                onChange={(e) => dispatch( buyOrderAmountChanged( e.target.value ) )}\n                required\n              />\n            </div>\n          </div>\n          <div className=\"form-group small\">\n            <label>Buy Price</label>\n            <div className=\"input-group\">\n              <input\n                type=\"text\"\n                className=\"form-control form-control-sm bg-dark text-white\"\n                placeholder=\"Buy Price\"\n                onChange={(e) => dispatch( buyOrderPriceChanged( e.target.value ) )}\n                required\n              />\n            </div>\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary btn-sm btn-block\">Buy Order</button>\n          { showBuyTotal ? <small>Total: {buyOrder.amount * buyOrder.price} ETH</small> : null }\n        </form>\n\n      </Tab>\n\n      <Tab eventKey=\"sell\" title=\"Sell\" className=\"bg-dark\">\n\n        <form onSubmit={(event) => {\n          event.preventDefault()\n          makeSellOrder(dispatch, exchange, token, web3, sellOrder, account)\n        }}>\n        <div className=\"form-group small\">\n          <label>Buy Sell (BDB)</label>\n          <div className=\"input-group\">\n            <input\n              type=\"text\"\n              className=\"form-control form-control-sm bg-dark text-white\"\n              placeholder=\"Sell amount\"\n              onChange={(e) => dispatch( sellOrderAmountChanged( e.target.value ) )}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"form-group small\">\n          <label>Sell Price</label>\n          <div className=\"input-group\">\n            <input\n              type=\"text\"\n              className=\"form-control form-control-sm bg-dark text-white\"\n              placeholder=\"Sell Price\"\n              onChange={(e) => dispatch( sellOrderPriceChanged( e.target.value ) )}\n              required\n            />\n          </div>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary btn-sm btn-block\">Sell Order</button>\n        { showSellTotal ? <small>Total: {sellOrder.amount * sellOrder.price} ETH</small> : null }\n      </form>\n\n      </Tab>\n    </Tabs>\n  )\n}\n\nclass NewOrder extends Component {\n\n  render() {\n    return (\n      <div className=\"card bg-dark text-white\">\n        <div className=\"card-header\">\n          New Order\n        </div>\n        <div className=\"card-body\">\n          {this.props.showForm ? showForm(this.props) : <Spinner />}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  const buyOrder = buyOrderSelector(state)\n  const sellOrder = sellOrderSelector(state)\n\n  return {\n    account: accountSelector(state),\n    exchange: exchangeSelector(state),\n    token: tokenSelector(state),\n    web3: web3Selector(state),\n    buyOrder,\n    sellOrder,\n    showForm: !buyOrder.making && !sellOrder.making,\n    showBuyTotal: buyOrder.amount && buyOrder.price,\n    showSellTotal: sellOrder.amount && sellOrder.price\n  }\n}\n\nexport default connect(mapStateToProps)(NewOrder)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { exchangeSelector } from '../store/selectors'\nimport { loadAllOrders, subscribeToEvents } from '../store/interactions'\nimport OrderBook from './OrderBook'\nimport Trades from './Trades'\nimport MyTransactions from './MyTransactions'\nimport PriceChart from './PriceChart'\nimport Balance from './Balance'\nimport NewOrder from './NewOrder'\n\nclass Content extends Component {\n  componentWillMount() {\n    this.loadBlockchainData(this.props)\n  }\n\n  async loadBlockchainData(props) {\n    const { dispatch, exchange } = props\n    await loadAllOrders(exchange, dispatch)\n    await subscribeToEvents(exchange, dispatch)\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <div className=\"vertical-split\">\n          <Balance />\n          <NewOrder />\n        </div>\n        <OrderBook />\n        <div className=\"vertical-split\">\n          <PriceChart />\n          <MyTransactions />\n        </div>\n        <Trades />\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    exchange: exchangeSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(Content)\n","import React, { Component } from 'react'\nimport './App.css'\nimport Navbar from './Navbar'\nimport Content from './Content'\nimport { connect } from 'react-redux'\nimport {\n  loadWeb3,\n  loadAccount,\n  loadToken,\n  loadExchange\n} from '../store/interactions'\nimport { contractsLoadedSelector } from '../store/selectors'\n\nclass App extends Component {\n  componentWillMount() {\n    this.loadBlockchainData(this.props.dispatch)\n  }\n\n  async loadBlockchainData(dispatch) {\n    const web3 = await loadWeb3(dispatch)\n    const networkId = await web3.eth.net.getId()\n    await loadAccount(web3, dispatch)\n    const token = await loadToken(web3, networkId, dispatch)\n    if(!token) {\n      window.alert('Token smart contract not detected on the current network. Please select another network with Metamask.')\n      return\n    }\n    const exchange = await loadExchange(web3, networkId, dispatch)\n    if(!exchange) {\n      window.alert('Exchange smart contract not detected on the current network. Please select another network with Metamask.')\n      return\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        { this.props.contractsLoaded ? <Content /> : <div className=\"content\"></div> }\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    contractsLoaded: contractsLoadedSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(App)\n","import { combineReducers } from 'redux';\n\nfunction web3(state = {}, action) {\n  switch (action.type) {\n    case 'WEB3_LOADED':\n      return { ...state,  connection: action.connection }\n    case 'WEB3_ACCOUNT_LOADED':\n      return { ...state, account: action.account }\n    case 'ETHER_BALANCE_LOADED':\n      return { ...state, balance: action.balance }\n    default:\n      return state\n  }\n}\n\nfunction token(state = {}, action) {\n  switch (action.type) {\n    case 'TOKEN_LOADED':\n      return { ...state, loaded: true, contract: action.contract }\n    case 'TOKEN_BALANCE_LOADED':\n      return { ...state, balance: action.balance }\n    default:\n      return state\n  }\n}\n\nfunction exchange(state = {}, action) {\n  let index, data\n\n  switch (action.type) {\n    case 'EXCHANGE_LOADED':\n      return { ...state, loaded: true, contract: action.contract }\n    case 'CANCELLED_ORDERS_LOADED':\n      return { ...state, cancelledOrders: { loaded: true, data: action.cancelledOrders } }\n    case 'FILLED_ORDERS_LOADED':\n      return { ...state, filledOrders: { loaded: true, data: action.filledOrders } }\n    case 'ALL_ORDERS_LOADED':\n      return { ...state, allOrders: { loaded: true, data: action.allOrders } }\n    case 'ORDER_CANCELLING':\n      return { ...state, orderCancelling: true }\n    case 'ORDER_CANCELLED':\n      return {\n        ...state,\n        orderCancelling: false,\n        cancelledOrders: {\n          ...state.cancelledOrders,\n          data: [\n            ...state.cancelledOrders.data,\n            action.order\n          ]\n        }\n      }\n    case 'ORDER_FILLED':\n      // Prevent duplicate orders\n      index = state.filledOrders.data.findIndex(order => order.id === action.order.id);\n\n      if(index === -1) {\n        data = [...state.filledOrders.data, action.order]\n      } else {\n        data = state.filledOrders.data\n      }\n\n      return {\n        ...state,\n        orderFilling: false,\n        filledOrders: {\n          ...state.filledOrders,\n          data\n        }\n      }\n\n    case 'ORDER_FILLING':\n      return { ...state, orderFilling: true }\n\n    case 'EXCHANGE_ETHER_BALANCE_LOADED':\n      return { ...state, etherBalance: action.balance }\n    case 'EXCHANGE_TOKEN_BALANCE_LOADED':\n      return { ...state, tokenBalance: action.balance }\n    case 'BALANCES_LOADING':\n      return { ...state, balancesLoading: true }\n    case 'BALANCES_LOADED':\n      return { ...state, balancesLoading: false }\n    case 'ETHER_DEPOSIT_AMOUNT_CHANGED':\n      return { ...state, etherDepositAmount: action.amount }\n    case 'ETHER_WITHDRAW_AMOUNT_CHANGED':\n      return { ...state, etherWithdrawAmount: action.amount }\n    case 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\n      return { ...state, tokenDepositAmount: action.amount }\n    case 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\n      return { ...state, tokenWithdrawAmount: action.amount }\n\n    case 'BUY_ORDER_AMOUNT_CHANGED':\n      return { ...state, buyOrder: { ...state.buyOrder, amount: action.amount } }\n    case 'BUY_ORDER_PRICE_CHANGED':\n      return { ...state, buyOrder: { ...state.buyOrder, price: action.price } }\n    case 'BUY_ORDER_MAKING':\n      return { ...state, buyOrder: { ...state.buyOrder, amount: null, price: null, making: true } }\n\n    case 'ORDER_MADE':\n      // Prevent duplicate orders\n      index = state.allOrders.data.findIndex(order => order.id === action.order.id);\n\n      if(index === -1) {\n        data = [...state.allOrders.data, action.order]\n      } else {\n        data = state.allOrders.data\n      }\n\n      return {\n        ...state,\n        allOrders: {\n          ...state.allOrders,\n          data\n        },\n        buyOrder: {\n          ...state.buyOrder,\n          making: false\n        },\n        sellOrder: {\n          ...state.sellOrder,\n          making: false\n        }\n      }\n\n    case 'SELL_ORDER_AMOUNT_CHANGED':\n      return { ...state, sellOrder: { ...state.sellOrder, amount: action.amount } }\n    case 'SELL_ORDER_PRICE_CHANGED':\n      return { ...state, sellOrder: { ...state.sellOrder, price: action.price } }\n    case 'SELL_ORDER_MAKING':\n      return { ...state, sellOrder: { ...state.sellOrder, amount: null, price: null, making: true } }\n\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  web3,\n  token,\n  exchange\n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from './reducers'\n\nconst loggerMiddleware = createLogger()\nconst middleware = []\n\n// For Redux Dev Tools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport default function configureStore(preloadedState) {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    composeEnhancers(applyMiddleware(...middleware, loggerMiddleware))\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App'\nimport configureStore from './store/configureStore'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}